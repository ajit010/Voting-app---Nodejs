Step-by-Step Practical Implementation

1. Setting Up the GCP Environment
First, enable the required APIs in Google Cloud Console:

Firebase Authentication (for OTP verification)
Cloud Firestore (for storing voter details & votes)
Cloud Vision API (for face recognition)
Cloud Storage (for storing images)
Cloud Functions (for backend logic)

Run the following command in Google Cloud Shell to enable them:

commands :

gcloud services enable firestore.googleapis.com \
    vision.googleapis.com \
    firebase.googleapis.com \
    cloudfunctions.googleapis.com \
    storage.googleapis.com



2. Implementing OTP-Based Verification

We'll use Firebase Authentication for OTP verification.

Frontend (React) - Request OTP

Install Firebase in your React app:

npm install firebase


>> Configure Firebase in firebase.js:


import { initializeApp } from "firebase/app";
import { getAuth, signInWithPhoneNumber, RecaptchaVerifier } from "firebase/auth";

const firebaseConfig = {
  apiKey: "YOUR_FIREBASE_API_KEY",
  authDomain: "YOUR_FIREBASE_PROJECT.firebaseapp.com",
  projectId: "YOUR_FIREBASE_PROJECT_ID",
  storageBucket: "YOUR_FIREBASE_PROJECT.appspot.com",
  messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
  appId: "YOUR_FIREBASE_APP_ID",
};

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);

export { auth, signInWithPhoneNumber, RecaptchaVerifier };




>> In your voting page (Vote.js):


import React, { useState } from "react";
import { auth, signInWithPhoneNumber, RecaptchaVerifier } from "./firebase";

function Vote() {
  const [phone, setPhone] = useState("");
  const [otp, setOtp] = useState("");
  const [verificationId, setVerificationId] = useState(null);

  const sendOTP = async () => {
    const recaptcha = new RecaptchaVerifier("recaptcha-container", {}, auth);
    const confirmation = await signInWithPhoneNumber(auth, phone, recaptcha);
    setVerificationId(confirmation.verificationId);
  };

  const verifyOTP = async () => {
    const credential = auth.PhoneAuthProvider.credential(verificationId, otp);
    await auth.signInWithCredential(credential);
    alert("Phone Verified! Proceed with Face Recognition.");
  };

  return (
    <div>
      <h2>Enter Phone Number:</h2>
      <input value={phone} onChange={(e) => setPhone(e.target.value)} />
      <button onClick={sendOTP}>Send OTP</button>
      <div id="recaptcha-container"></div>

      {verificationId && (
        <>
          <h2>Enter OTP:</h2>
          <input value={otp} onChange={(e) => setOtp(e.target.value)} />
          <button onClick={verifyOTP}>Verify OTP</button>
        </>
      )}
    </div>
  );
}

export default Vote;


3. Implementing Face Recognition with Cloud Vision

Once OTP verification is successful, the user will upload a live photo.
We will compare it with the stored reference image.

Frontend - Capture & Upload Image

>> Add the following inside Vote.js after OTP verification:


const uploadImage = async (event) => {
  const file = event.target.files[0];
  const formData = new FormData();
  formData.append("file", file);

  const response = await fetch("https://YOUR_CLOUD_FUNCTION_URL", {
    method: "POST",
    body: formData,
  });

  const result = await response.json();
  if (result.match) {
    alert("Face Matched! Proceed to Vote.");
  } else {
    alert("Face did not match. Voting not allowed.");
  }
};



-- Add this in your JSX:


<input type="file" accept="image/*" capture="user" onChange={uploadImage} />


Backend - Cloud Function for Face Recognition

Create a Cloud Function to process face matching.

1. Install Dependencies

Run this in Cloud Shell:

mkdir face-recognition && cd face-recognition
npm init -y
npm install @google-cloud/storage @google-cloud/vision express multer


2. Create index.js


const express = require("express");
const Multer = require("multer");
const { Storage } = require("@google-cloud/storage");
const vision = require("@google-cloud/vision");

const app = express();
const storage = new Storage();
const visionClient = new vision.ImageAnnotatorClient();
const bucketName = "YOUR_BUCKET_NAME";  // Store user images in GCP Storage

const multer = Multer({ storage: Multer.memoryStorage() });

app.post("/verify-face", multer.single("file"), async (req, res) => {
  try {
    const fileBuffer = req.file.buffer;

    // Upload the image to Cloud Storage
    const fileName = `uploaded_${Date.now()}.jpg`;
    const file = storage.bucket(bucketName).file(fileName);
    await file.save(fileBuffer, { contentType: "image/jpeg" });

    // Perform face detection on uploaded image
    const [newFace] = await visionClient.faceDetection(`gs://${bucketName}/${fileName}`);
    const newFaceAnnotations = newFace.faceAnnotations;

    if (!newFaceAnnotations || newFaceAnnotations.length === 0) {
      return res.json({ match: false });
    }

    // Compare with stored reference image
    const [referenceFace] = await visionClient.faceDetection(`gs://${bucketName}/stored_user_image.jpg`);
    const referenceFaceAnnotations = referenceFace.faceAnnotations;

    if (!referenceFaceAnnotations || referenceFaceAnnotations.length === 0) {
      return res.json({ match: false });
    }

    // Compare face confidence scores
    const newFaceLandmarks = newFaceAnnotations[0].boundingPoly.vertices;
    const referenceFaceLandmarks = referenceFaceAnnotations[0].boundingPoly.vertices;

    const match = JSON.stringify(newFaceLandmarks) === JSON.stringify(referenceFaceLandmarks);
    res.json({ match });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

exports.verifyFace = app;



3. Deploy the Cloud Function

gcloud functions deploy verifyFace \
  --runtime=nodejs20 \
  --trigger-http \
  --allow-unauthenticated

4. Voting System

Once face recognition is successful, allow the user to vote.

Store votes in Firestore.
Prevent duplicate votes by storing voter status.


Firestore Database Structure

votes (Collection)
 ├── voter_id_123 (Document)
 │    ├── candidate: "Candidate A"
 │    ├── timestamp: "2025-02-06T12:00:00Z"


5. Displaying Results

Create a Cloud Function to count votes.


const { Firestore } = require("@google-cloud/firestore");
const firestore = new Firestore();

exports.getResults = async (req, res) => {
  const votesRef = firestore.collection("votes");
  const snapshot = await votesRef.get();

  const results = {};
  snapshot.forEach((doc) => {
    const { candidate } = doc.data();
    results[candidate] = (results[candidate] || 0) + 1;
  });

  res.json(results);
};




Deploy the function:


gcloud functions deploy getResults \
  --runtime=nodejs20 \
  --trigger-http \
  --allow-unauthenticated



Final Steps


Host the frontend on Firebase Hosting.
Connect backend APIs to frontend.
Secure Cloud Functions with IAM roles.
Monitor logs with Cloud Logging.




Final Steps for Deployment and Security

1. Hosting the Frontend on Firebase Hosting
Once your React frontend is ready, you need to deploy it on Firebase Hosting.

1.1 Install Firebase CLI
Run the following command on your local machine:


npm install -g firebase-tools

1.2 Login to Firebase
Authenticate with your Google account:

firebase login

1.3 Initialize Firebase in Your Project
Navigate to your React project folder and initialize Firebase:

firebase init

Choose Hosting.

Select your Firebase project.

Set the public directory to build (or dist if using Vite).
Configure as a single-page app (SPA).
Do not overwrite index.html.

1.4 Build Your React App

If using React, run:


npm run build

1.5 Deploy to Firebase Hosting

firebase deploy

Now, your frontend is live!



2. Connecting Backend APIs to Frontend

Backend APIs Deployed on GCP

OTP Authentication (Handled by Firebase Auth)
Face Recognition (verifyFace Cloud Function)
Vote Submission API (submitVote Cloud Function)
Results API (getResults Cloud Function)
Frontend Integration

In Vote.js, modify uploadImage to send images to the Cloud Function:

const uploadImage = async (event) => {
  const file = event.target.files[0];
  const formData = new FormData();
  formData.append("file", file);

  const response = await fetch("https://REGION-PROJECT.cloudfunctions.net/verifyFace", {
    method: "POST",
    body: formData,
  });

  const result = await response.json();
  if (result.match) {
    alert("Face Matched! Proceed to Vote.");
  } else {
    alert("Face did not match. Voting not allowed.");
  }
};



3. Securing Cloud Functions with IAM Roles

By default, Cloud Functions are public if set to --allow-unauthenticated.
To restrict access, follow these steps:

3.1 Restrict Voting API

gcloud functions add-iam-policy-binding submitVote \
  --member="allUsers" \
  --role="roles/cloudfunctions.invoker"


Instead, allow only authenticated users:


gcloud functions add-iam-policy-binding submitVote \
  --member="serviceAccount:YOUR_SERVICE_ACCOUNT" \
  --role="roles/cloudfunctions.invoker"




3.2 Restrict Face Recognition API

gcloud functions remove-iam-policy-binding verifyFace \
  --member="allUsers" \
  --role="roles/cloudfunctions.invoker"

Now, only authenticated users can access these APIs.



4. Prevent Duplicate Votes

Modify the submitVote function to check if a voter has already voted.

Firestore Structure

votes (Collection)
 ├── voter_id_123 (Document)
 │    ├── candidate: "Candidate A"
 │    ├── timestamp: "2025-02-06T12:00:00Z"

Backend: Cloud Function to Submit Vote




>> Modify index.js in the backend:


const { Firestore } = require("@google-cloud/firestore");
const firestore = new Firestore();

exports.submitVote = async (req, res) => {
  const { voterId, candidate } = req.body;

  // Check if voter already voted
  const voteDoc = await firestore.collection("votes").doc(voterId).get();
  if (voteDoc.exists) {
    return res.status(400).json({ message: "You have already voted!" });
  }

  // Store vote
  await firestore.collection("votes").doc(voterId).set({
    candidate,
    timestamp: new Date().toISOString(),
  });

  res.json({ message: "Vote submitted successfully!" });
};



>> Deploy the Function

gcloud functions deploy submitVote \
  --runtime=nodejs20 \
  --trigger-http \
  --allow-unauthenticated


5. Displaying Live Voting Results

>> Create a function getResults.js:


const { Firestore } = require("@google-cloud/firestore");
const firestore = new Firestore();

exports.getResults = async (req, res) => {
  const votesRef = firestore.collection("votes");
  const snapshot = await votesRef.get();

  const results = {};
  snapshot.forEach((doc) => {
    const { candidate } = doc.data();
    results[candidate] = (results[candidate] || 0) + 1;
  });

  res.json(results);
};




>> Deploy the Function

gcloud functions deploy getResults \
  --runtime=nodejs20 \
  --trigger-http \
  --allow-unauthenticated

Frontend: Fetch Results

Modify your frontend to display real-time results.


const fetchResults = async () => {
  const response = await fetch("https://REGION-PROJECT.cloudfunctions.net/getResults");
  const data = await response.json();
  console.log("Voting Results:", data);
};



6. Final Deployment Checklist
✅ Frontend hosted on Firebase Hosting
✅ Backend APIs secured with IAM
✅ Firestore prevents duplicate votes
✅ Face Recognition API integrated
✅ Live voting results displayed








